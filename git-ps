#!/bin/bash

# Configuration Constants
remote="origin"
base_branch="master"
remote_base="${remote}/${base_branch}"

print_ps_usage() {
  echo "Usage: git-ps <subcommand>"
  echo "valid subcommands: ls, rebase, rr, push"
}

list_patch_stack() {
  git log --pretty='format:%C(auto)%h %s' ${remote_base}..${base_branch}
}

list_patch_stack_up_to() {
  git log --pretty='format:%C(auto)%h %s' ${remote_base}..$1~
}

print_ps_rr_usage() {
  echo "Usage: git rr <branch_name> <sha>"
  echo "Usage: git rr -i|--interactive <branch_name>"
}

fetch_upstream() {
  git fetch --quiet origin master
  if [ $? -ne 0 ]; then
    echo "fatal: Failed to fetch latest state from ${remote} ${base_branch}"
    exit 20
  fi
}

validate_skim_is_available() {
  command -v sk >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "fatal: interactive mode depends on the 'skim' fuzzy finder but it in't in the path'"
    echo "If you haven't installed you can easily do so via: brew install sk"
    exit 2
  fi
}

select_commit_with_skim() {
  selected_log_entry=$(git log --pretty='format:%C(auto)%h %s' ${remote_base}..${base_branch} | sk)
  if [ "${selected_log_entry}" = "" ]; then
    echo "fatal: You neglected to select a commit to request review for."
    echo "We can't request a review if you don't tell us what you want reviewed silly."
    exit 3
  fi
  echo "${selected_log_entry}"
}

parse_sha_from_log_entry() {
  commit_sha=$(echo $1 | awk -F' ' '{print $1}')
  echo "${commit_sha}"
}

validate_sha_exists() {
  # Make sure that a commit with the provided sha exists.
  res=$(git cat-file -t $1 2> /dev/null)
  if [ "${res}" != "commit" ]; then
    echo "fatal: Not a valid commit name ${commit_sha}"
    exit 4
  fi
}

validate_no_uncommited_changes() {
  # Make sure there aren't any local un-committed changes as this must
  # change branches to be able to cherry-pick the specified commit into the
  # branch.
  git diff-index --quiet HEAD
  if [ $? -ne 0 ]; then
    echo "fatal: Uncommitted changes are present."
    echo "Please commit or stash any uncommitted changes before running this command."
    git diff-index HEAD
    exit 5
  fi
}

get_checked_out_branch() {
  # Get currently checked out branch name
  original_branch_name=$(git rev-parse --abbrev-ref HEAD)
  echo "$original_branch_name"
}

create_branch_on_remote_base_with_name() {
  # Creates the non-tracking branch named ${branch_name} based on
  # ${remote_branch} when branch doesn't already exist. When the branch does
  # already exist simply reset the branch to start at ${remote_base}, effectively
  # dropping any commits it previously had if any.
  git branch -f -q --no-track $1 ${remote_base}
  if [ $? -ne 0 ]; then
    echo "fatal: Failed to create/reset branch $1. No worries you are still in a decent state."
    exit 6
  fi
}

checkout_branch_with_name() {
  git checkout -q $1
  if [ $? -ne 0 ]; then
    echo "fatal: Failed to checkout $1."
    exit 7
  fi
}

cherry_pick() {
  # cherry pick the commit
  git cherry-pick $1 > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo -n "failed"
  else
    echo -n "succeeded"
  fi
}

push_branch_up() {
  # force push up to the remote
  git push -f -q ${remote} $1:$1
  if [ $? -ne 0 ]; then
    echo "warn: Failed to push $1 up to ${remote}"
    echo "You should figure out why the push failed and correct the issue and push the branch up to the remote."
    exit 9
  fi
}

cherry_pick_abort() {
  git cherry-pick --abort
  if [ $? -ne 0 ]; then
    echo "error: Failed to abort cherry pick"
    echo "I don't believe this should every happen. If it does we should really understand why and handle it better."
    exit 30
  fi
}

request_review() {
  # Make sure right number of arguments were passed to the command and validate
  # the values of those arguments as best as we can.
  if [ "$#" -ne 2 ]; then
    echo "Wrong number of arguments"
    print_ps_rr_usage
    exit 1
  fi

  # Options Parsing

  if [ "$1" = "-i" ] || [ "$1" = "--interactive" ]; then
    interactive=1
  else
    interactive=0
  fi

  if [ $interactive -eq 1 ]; then
    validate_skim_is_available

    selected_log_entry=$( select_commit_with_skim )
    commit_sha=$( parse_sha_from_log_entry $selected_log_entry )
    branch_name=$2
  else
    branch_name=$1
    commit_sha=$2
  fi

  ## Input Validations

  validate_sha_exists $commit_sha
  validate_no_uncommited_changes

  original_branch_name=$( get_checked_out_branch )

  create_branch_on_remote_base_with_name ${branch_name}
  checkout_branch_with_name ${branch_name}
  cherry_pick_res=$(cherry_pick ${commit_sha})
  if [ "${cherry_pick_res}" = "failed" ]; then
    echo "Looks like you are trying to request review of (${commit_sha}), a patch that is dependent on another patch that is NOT currently in ${remote_base}. Dependent patches MUST be in ${remote_base} before requesting review for patches that depend on them."
    echo ""

    list_patch_stack_up_to ${commit_sha}

    echo ""
    echo "Please consider whether the patch should actually be dependent or if it should rather be altered such that it is independent and can be reviewed independently."

    cherry_pick_abort
    checkout_branch_with_name ${base_branch}
  fi
  
  push_branch_up ${branch_name}
  checkout_branch_with_name ${original_branch_name}
}

rebase() {
  git rebase -i --onto ${remote_base} ${remote_base} ${base_branch}
}

push_branch_to_mainline() {
  git push ${remote} $1:${base_branch}
  if [ $? -ne 0 ]; then
    echo "fatal: failed to push $1 up to ${remote_base}"
    exit 21
  fi
}

push() {
  fetch_upstream

  # Make sure right number of arguments were passed to the command and validate
  # the values of those arguments as best as we can.
  if [ "$#" -ne 2 ]; then
    echo "Wrong number of arguments"
    print_ps_rr_usage
    exit 1
  fi

  # Options Parsing

  if [ "$1" = "-i" ] || [ "$1" = "--interactive" ]; then
    interactive=1
  else
    interactive=0
  fi

  if [ $interactive -eq 1 ]; then
    validate_skim_is_available

    selected_log_entry=$( select_commit_with_skim )
    commit_sha=$( parse_sha_from_log_entry $selected_log_entry )
    branch_name=$2
  else
    branch_name=$1
    commit_sha=$2
  fi

  validate_sha_exists $commit_sha
  validate_no_uncommited_changes

  original_branch_name=$( get_checked_out_branch )

  create_branch_on_remote_base_with_name ${branch_name}
  checkout_branch_with_name ${branch_name}
  cherry_pick_res=$(cherry_pick ${commit_sha})
  if [ "${cherry_pick_res}" = "failed" ]; then
    echo "Looks like you are trying to push (${commit_sha}), a patch that is dependent on another patch that is NOT currently in ${remote_base}.  Dependent patches MUST be in ${remote_base} before pushing patches that depend on them." 
    echo ""
    echo "The dependent patch is one or more of the following:"

    list_patch_stack_up_to ${commit_sha}

    echo ""
    echo "Please consider whether the patch should actually be dependent or if it should rather be altered such that it is independent and can be reviewed independently and pushed independently."

    cherry_pick_abort
    checkout_branch_with_name ${base_branch}
  fi

  push_branch_to_mainline ${branch_name}

  checkout_branch_with_name ${base_branch}

  # delete the local temp branch
}

pull() {
  fetch_upstream
  rebase
}

validate_min_num_args_met() {
  if [ "$#" -lt 1 ]; then
    echo "error: wrong number of arguments"
    echo ""
    print_ps_usage
    exit 1
  fi
}

validate_min_num_args_met $@
subcommand=$1
shift

if [ "$subcommand" = "ls" ]; then
  list_patch_stack
elif [ "$subcommand" = "rr" ]; then
  request_review $@
elif [ "$subcommand" = "rebase" ]; then
  rebase $@
elif [ "$subcommand" = "push" ]; then
  push $@
elif [ "$subcommand" = "pull" ]; then
  pull $@
else
  echo "error: ${subcommand} is an invalid subcommand"
  echo ""
  print_ps_usage
fi

exit 0
